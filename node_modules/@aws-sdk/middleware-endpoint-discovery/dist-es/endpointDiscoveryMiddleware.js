import { __assign, __awaiter, __generator } from "tslib";
import { HttpRequest } from "@aws-sdk/protocol-http";
import { getCacheKey } from "./getCacheKey";
import { updateDiscoveredEndpointInCache } from "./updateDiscoveredEndpointInCache";
export var endpointDiscoveryMiddleware = function (config, middlewareConfig) {
    return function (next, context) {
        return function (args) { return __awaiter(void 0, void 0, void 0, function () {
            var endpointDiscoveryCommandCtor, isDiscoveredEndpointRequired, identifiers, clientName, commandName, isEndpointDiscoveryEnabled, cacheKey, request, endpoint;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (config.isCustomEndpoint) {
                            if (config.isClientEndpointDiscoveryEnabled) {
                                throw new Error("Custom endpoint is supplied; endpointDiscoveryEnabled must not be true.");
                            }
                            return [2, next(args)];
                        }
                        endpointDiscoveryCommandCtor = config.endpointDiscoveryCommandCtor;
                        isDiscoveredEndpointRequired = middlewareConfig.isDiscoveredEndpointRequired, identifiers = middlewareConfig.identifiers;
                        clientName = context.clientName, commandName = context.commandName;
                        return [4, config.endpointDiscoveryEnabled()];
                    case 1:
                        isEndpointDiscoveryEnabled = _a.sent();
                        return [4, getCacheKey(commandName, config, { identifiers: identifiers })];
                    case 2:
                        cacheKey = _a.sent();
                        if (!isDiscoveredEndpointRequired) return [3, 4];
                        if (isEndpointDiscoveryEnabled === false) {
                            throw new Error("Endpoint Discovery is disabled but " + commandName + " on " + clientName + " requires it." +
                                " Please check your configurations.");
                        }
                        return [4, updateDiscoveredEndpointInCache(config, __assign(__assign({}, middlewareConfig), { commandName: commandName, cacheKey: cacheKey, endpointDiscoveryCommandCtor: endpointDiscoveryCommandCtor }))];
                    case 3:
                        _a.sent();
                        return [3, 5];
                    case 4:
                        if (isEndpointDiscoveryEnabled) {
                            updateDiscoveredEndpointInCache(config, __assign(__assign({}, middlewareConfig), { commandName: commandName, cacheKey: cacheKey, endpointDiscoveryCommandCtor: endpointDiscoveryCommandCtor }));
                        }
                        _a.label = 5;
                    case 5:
                        request = args.request;
                        if (cacheKey && HttpRequest.isInstance(request)) {
                            endpoint = config.endpointCache.getEndpoint(cacheKey);
                            if (endpoint) {
                                request.hostname = endpoint;
                            }
                        }
                        return [2, next(args)];
                }
            });
        }); };
    };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW5kcG9pbnREaXNjb3ZlcnlNaWRkbGV3YXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2VuZHBvaW50RGlzY292ZXJ5TWlkZGxld2FyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBU3JELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHNUMsT0FBTyxFQUFFLCtCQUErQixFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFFcEYsTUFBTSxDQUFDLElBQU0sMkJBQTJCLEdBQ3RDLFVBQUMsTUFBNEQsRUFBRSxnQkFBbUQ7SUFDbEgsT0FBQSxVQUNFLElBQStCLEVBQy9CLE9BQWdDO1FBRWxDLE9BQUEsVUFBTyxJQUFnQzs7Ozs7d0JBQ3JDLElBQUksTUFBTSxDQUFDLGdCQUFnQixFQUFFOzRCQUMzQixJQUFJLE1BQU0sQ0FBQyxnQ0FBZ0MsRUFBRTtnQ0FDM0MsTUFBTSxJQUFJLEtBQUssQ0FBQyx5RUFBeUUsQ0FBQyxDQUFDOzZCQUM1Rjs0QkFDRCxXQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBQzt5QkFDbkI7d0JBRU8sNEJBQTRCLEdBQUssTUFBTSw2QkFBWCxDQUFZO3dCQUN4Qyw0QkFBNEIsR0FBa0IsZ0JBQWdCLDZCQUFsQyxFQUFFLFdBQVcsR0FBSyxnQkFBZ0IsWUFBckIsQ0FBc0I7d0JBQy9ELFVBQVUsR0FBa0IsT0FBTyxXQUF6QixFQUFFLFdBQVcsR0FBSyxPQUFPLFlBQVosQ0FBYTt3QkFDVCxXQUFNLE1BQU0sQ0FBQyx3QkFBd0IsRUFBRSxFQUFBOzt3QkFBcEUsMEJBQTBCLEdBQUcsU0FBdUM7d0JBQ3pELFdBQU0sV0FBVyxDQUFDLFdBQVcsRUFBRSxNQUFNLEVBQUUsRUFBRSxXQUFXLGFBQUEsRUFBRSxDQUFDLEVBQUE7O3dCQUFsRSxRQUFRLEdBQUcsU0FBdUQ7NkJBRXBFLDRCQUE0QixFQUE1QixjQUE0Qjt3QkFFOUIsSUFBSSwwQkFBMEIsS0FBSyxLQUFLLEVBQUU7NEJBQ3hDLE1BQU0sSUFBSSxLQUFLLENBQ2Isd0NBQXNDLFdBQVcsWUFBTyxVQUFVLGtCQUFlO2dDQUMvRSxvQ0FBb0MsQ0FDdkMsQ0FBQzt5QkFDSDt3QkFHRCxXQUFNLCtCQUErQixDQUFDLE1BQU0sd0JBQ3ZDLGdCQUFnQixLQUNuQixXQUFXLGFBQUEsRUFDWCxRQUFRLFVBQUEsRUFDUiw0QkFBNEIsOEJBQUEsSUFDNUIsRUFBQTs7d0JBTEYsU0FLRSxDQUFDOzs7d0JBQ0UsSUFBSSwwQkFBMEIsRUFBRTs0QkFJckMsK0JBQStCLENBQUMsTUFBTSx3QkFDakMsZ0JBQWdCLEtBQ25CLFdBQVcsYUFBQSxFQUNYLFFBQVEsVUFBQSxFQUNSLDRCQUE0Qiw4QkFBQSxJQUM1QixDQUFDO3lCQUNKOzs7d0JBRU8sT0FBTyxHQUFLLElBQUksUUFBVCxDQUFVO3dCQUN6QixJQUFJLFFBQVEsSUFBSSxXQUFXLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxFQUFFOzRCQUN6QyxRQUFRLEdBQUcsTUFBTSxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUM7NEJBQzVELElBQUksUUFBUSxFQUFFO2dDQUNaLE9BQU8sQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDOzZCQUM3Qjt5QkFDRjt3QkFFRCxXQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBQzs7O2FBQ25CO0lBbkRELENBbURDO0FBdkRELENBdURDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIdHRwUmVxdWVzdCB9IGZyb20gXCJAYXdzLXNkay9wcm90b2NvbC1odHRwXCI7XG5pbXBvcnQge1xuICBCdWlsZEhhbmRsZXIsXG4gIEJ1aWxkSGFuZGxlckFyZ3VtZW50cyxcbiAgQnVpbGRIYW5kbGVyT3V0cHV0LFxuICBIYW5kbGVyRXhlY3V0aW9uQ29udGV4dCxcbiAgTWV0YWRhdGFCZWFyZXIsXG59IGZyb20gXCJAYXdzLXNkay90eXBlc1wiO1xuXG5pbXBvcnQgeyBnZXRDYWNoZUtleSB9IGZyb20gXCIuL2dldENhY2hlS2V5XCI7XG5pbXBvcnQgeyBFbmRwb2ludERpc2NvdmVyeU1pZGRsZXdhcmVDb25maWcgfSBmcm9tIFwiLi9nZXRFbmRwb2ludERpc2NvdmVyeVBsdWdpblwiO1xuaW1wb3J0IHsgRW5kcG9pbnREaXNjb3ZlcnlSZXNvbHZlZENvbmZpZywgUHJldmlvdXNseVJlc29sdmVkIH0gZnJvbSBcIi4vcmVzb2x2ZUVuZHBvaW50RGlzY292ZXJ5Q29uZmlnXCI7XG5pbXBvcnQgeyB1cGRhdGVEaXNjb3ZlcmVkRW5kcG9pbnRJbkNhY2hlIH0gZnJvbSBcIi4vdXBkYXRlRGlzY292ZXJlZEVuZHBvaW50SW5DYWNoZVwiO1xuXG5leHBvcnQgY29uc3QgZW5kcG9pbnREaXNjb3ZlcnlNaWRkbGV3YXJlID1cbiAgKGNvbmZpZzogRW5kcG9pbnREaXNjb3ZlcnlSZXNvbHZlZENvbmZpZyAmIFByZXZpb3VzbHlSZXNvbHZlZCwgbWlkZGxld2FyZUNvbmZpZzogRW5kcG9pbnREaXNjb3ZlcnlNaWRkbGV3YXJlQ29uZmlnKSA9PlxuICA8T3V0cHV0IGV4dGVuZHMgTWV0YWRhdGFCZWFyZXIgPSBNZXRhZGF0YUJlYXJlcj4oXG4gICAgbmV4dDogQnVpbGRIYW5kbGVyPGFueSwgT3V0cHV0PixcbiAgICBjb250ZXh0OiBIYW5kbGVyRXhlY3V0aW9uQ29udGV4dFxuICApOiBCdWlsZEhhbmRsZXI8YW55LCBPdXRwdXQ+ID0+XG4gIGFzeW5jIChhcmdzOiBCdWlsZEhhbmRsZXJBcmd1bWVudHM8YW55Pik6IFByb21pc2U8QnVpbGRIYW5kbGVyT3V0cHV0PE91dHB1dD4+ID0+IHtcbiAgICBpZiAoY29uZmlnLmlzQ3VzdG9tRW5kcG9pbnQpIHtcbiAgICAgIGlmIChjb25maWcuaXNDbGllbnRFbmRwb2ludERpc2NvdmVyeUVuYWJsZWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDdXN0b20gZW5kcG9pbnQgaXMgc3VwcGxpZWQ7IGVuZHBvaW50RGlzY292ZXJ5RW5hYmxlZCBtdXN0IG5vdCBiZSB0cnVlLmApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5leHQoYXJncyk7XG4gICAgfVxuXG4gICAgY29uc3QgeyBlbmRwb2ludERpc2NvdmVyeUNvbW1hbmRDdG9yIH0gPSBjb25maWc7XG4gICAgY29uc3QgeyBpc0Rpc2NvdmVyZWRFbmRwb2ludFJlcXVpcmVkLCBpZGVudGlmaWVycyB9ID0gbWlkZGxld2FyZUNvbmZpZztcbiAgICBjb25zdCB7IGNsaWVudE5hbWUsIGNvbW1hbmROYW1lIH0gPSBjb250ZXh0O1xuICAgIGNvbnN0IGlzRW5kcG9pbnREaXNjb3ZlcnlFbmFibGVkID0gYXdhaXQgY29uZmlnLmVuZHBvaW50RGlzY292ZXJ5RW5hYmxlZCgpO1xuICAgIGNvbnN0IGNhY2hlS2V5ID0gYXdhaXQgZ2V0Q2FjaGVLZXkoY29tbWFuZE5hbWUsIGNvbmZpZywgeyBpZGVudGlmaWVycyB9KTtcblxuICAgIGlmIChpc0Rpc2NvdmVyZWRFbmRwb2ludFJlcXVpcmVkKSB7XG4gICAgICAvLyB0aHJvdyBlcnJvciBpZiBlbmRwb2ludCBkaXNjb3ZlcnkgaXMgcmVxdWlyZWQsIGFuZCBpdCdzIGV4cGxpY2l0bHkgZGlzYWJsZWQuXG4gICAgICBpZiAoaXNFbmRwb2ludERpc2NvdmVyeUVuYWJsZWQgPT09IGZhbHNlKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICBgRW5kcG9pbnQgRGlzY292ZXJ5IGlzIGRpc2FibGVkIGJ1dCAke2NvbW1hbmROYW1lfSBvbiAke2NsaWVudE5hbWV9IHJlcXVpcmVzIGl0LmAgK1xuICAgICAgICAgICAgYCBQbGVhc2UgY2hlY2sgeW91ciBjb25maWd1cmF0aW9ucy5gXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICAvLyBjYWxsIGF3YWl0IG9uIEVuZHBvaW50IERpc2NvdmVyeSBBUEkgdXRpbGl0eSBzbyB0aGF0IGZ1bmN0aW9uIGJsb2Nrc1xuICAgICAgLy8gdGlsbCBkaXNjb3ZlcmVkIGVuZHBvaW50IGlzIHVwZGF0ZWQgaW4gY2FjaGVcbiAgICAgIGF3YWl0IHVwZGF0ZURpc2NvdmVyZWRFbmRwb2ludEluQ2FjaGUoY29uZmlnLCB7XG4gICAgICAgIC4uLm1pZGRsZXdhcmVDb25maWcsXG4gICAgICAgIGNvbW1hbmROYW1lLFxuICAgICAgICBjYWNoZUtleSxcbiAgICAgICAgZW5kcG9pbnREaXNjb3ZlcnlDb21tYW5kQ3RvcixcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoaXNFbmRwb2ludERpc2NvdmVyeUVuYWJsZWQpIHtcbiAgICAgIC8vIERpc2NvdmVyIGVuZHBvaW50cyBvbmx5IGlmIGVuZHBvaW50IGRpc2NvdmVyeSBpcyBleHBsaWNpdGx5IGVuYWJsZWQuXG4gICAgICAvLyBEbyBub3QgY2FsbCBhd2FpdCBhd2FpdCBvbiBFbmRwb2ludCBEaXNjb3ZlcnkgQVBJIHV0aWxpdHkgc28gdGhhdCBmdW5jdGlvblxuICAgICAgLy8gZG9lcyBub3QgYmxvY2ssIHRoZSBjb21tYW5kIHdpbGwgdXNlIGRpc2NvdmVyZWQgZW5kcG9pbnQsIGlmIGF2YWlsYWJsZS5cbiAgICAgIHVwZGF0ZURpc2NvdmVyZWRFbmRwb2ludEluQ2FjaGUoY29uZmlnLCB7XG4gICAgICAgIC4uLm1pZGRsZXdhcmVDb25maWcsXG4gICAgICAgIGNvbW1hbmROYW1lLFxuICAgICAgICBjYWNoZUtleSxcbiAgICAgICAgZW5kcG9pbnREaXNjb3ZlcnlDb21tYW5kQ3RvcixcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGNvbnN0IHsgcmVxdWVzdCB9ID0gYXJncztcbiAgICBpZiAoY2FjaGVLZXkgJiYgSHR0cFJlcXVlc3QuaXNJbnN0YW5jZShyZXF1ZXN0KSkge1xuICAgICAgY29uc3QgZW5kcG9pbnQgPSBjb25maWcuZW5kcG9pbnRDYWNoZS5nZXRFbmRwb2ludChjYWNoZUtleSk7XG4gICAgICBpZiAoZW5kcG9pbnQpIHtcbiAgICAgICAgcmVxdWVzdC5ob3N0bmFtZSA9IGVuZHBvaW50O1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBuZXh0KGFyZ3MpO1xuICB9O1xuIl19