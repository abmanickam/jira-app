import { __awaiter, __generator } from "tslib";
var requestQueue = {};
export var updateDiscoveredEndpointInCache = function (config, options) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        return [2, new Promise(function (resolve, reject) {
                var endpointCache = config.endpointCache;
                var cacheKey = options.cacheKey, commandName = options.commandName, identifiers = options.identifiers;
                var endpoints = endpointCache.get(cacheKey);
                if (endpoints && endpoints.length === 1 && endpoints[0].Address === "") {
                    if (options.isDiscoveredEndpointRequired) {
                        if (!requestQueue[cacheKey])
                            requestQueue[cacheKey] = [];
                        requestQueue[cacheKey].push({ resolve: resolve, reject: reject });
                    }
                    else {
                        resolve();
                    }
                }
                else if (endpoints && endpoints.length > 0) {
                    resolve();
                }
                else {
                    var placeholderEndpoints_1 = [{ Address: "", CachePeriodInMinutes: 1 }];
                    endpointCache.set(cacheKey, placeholderEndpoints_1);
                    var command = new options.endpointDiscoveryCommandCtor({
                        Operation: commandName.substr(0, commandName.length - 7),
                        Identifiers: identifiers,
                    });
                    var handler = command.resolveMiddleware(options.clientStack, config, options.options);
                    handler(command)
                        .then(function (result) {
                        endpointCache.set(cacheKey, result.output.Endpoints);
                        if (requestQueue[cacheKey]) {
                            requestQueue[cacheKey].forEach(function (_a) {
                                var resolve = _a.resolve;
                                resolve();
                            });
                            delete requestQueue[cacheKey];
                        }
                        resolve();
                    })
                        .catch(function (error) {
                        var _a;
                        if (error.name === "InvalidEndpointException" || ((_a = error.$metadata) === null || _a === void 0 ? void 0 : _a.httpStatusCode) === 421) {
                            endpointCache.delete(cacheKey);
                        }
                        var errorToThrow = Object.assign(new Error("The operation to discover endpoint failed." +
                            " Please retry, or provide a custom endpoint and disable endpoint discovery to proceed."), { reason: error });
                        if (requestQueue[cacheKey]) {
                            requestQueue[cacheKey].forEach(function (_a) {
                                var reject = _a.reject;
                                reject(errorToThrow);
                            });
                            delete requestQueue[cacheKey];
                        }
                        if (options.isDiscoveredEndpointRequired) {
                            reject(errorToThrow);
                        }
                        else {
                            endpointCache.set(cacheKey, placeholderEndpoints_1);
                            resolve();
                        }
                    });
                }
            })];
    });
}); };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBkYXRlRGlzY292ZXJlZEVuZHBvaW50SW5DYWNoZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy91cGRhdGVEaXNjb3ZlcmVkRW5kcG9pbnRJbkNhY2hlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFTQSxJQUFNLFlBQVksR0FBaUUsRUFBRSxDQUFDO0FBRXRGLE1BQU0sQ0FBQyxJQUFNLCtCQUErQixHQUFHLFVBQzdDLE1BQTRELEVBQzVELE9BQStDOztRQUUvQyxXQUFBLElBQUksT0FBTyxDQUFPLFVBQUMsT0FBTyxFQUFFLE1BQU07Z0JBQ3hCLElBQUEsYUFBYSxHQUFLLE1BQU0sY0FBWCxDQUFZO2dCQUN6QixJQUFBLFFBQVEsR0FBK0IsT0FBTyxTQUF0QyxFQUFFLFdBQVcsR0FBa0IsT0FBTyxZQUF6QixFQUFFLFdBQVcsR0FBSyxPQUFPLFlBQVosQ0FBYTtnQkFFdkQsSUFBTSxTQUFTLEdBQUcsYUFBYSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztnQkFFOUMsSUFBSSxTQUFTLElBQUksU0FBUyxDQUFDLE1BQU0sS0FBSyxDQUFDLElBQUksU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sS0FBSyxFQUFFLEVBQUU7b0JBR3RFLElBQUksT0FBTyxDQUFDLDRCQUE0QixFQUFFO3dCQUN4QyxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQzs0QkFBRSxZQUFZLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxDQUFDO3dCQUN6RCxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsT0FBTyxTQUFBLEVBQUUsTUFBTSxRQUFBLEVBQUUsQ0FBQyxDQUFDO3FCQUNsRDt5QkFBTTt3QkFDTCxPQUFPLEVBQUUsQ0FBQztxQkFDWDtpQkFDRjtxQkFBTSxJQUFJLFNBQVMsSUFBSSxTQUFTLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtvQkFFNUMsT0FBTyxFQUFFLENBQUM7aUJBQ1g7cUJBQU07b0JBR0wsSUFBTSxzQkFBb0IsR0FBRyxDQUFDLEVBQUUsT0FBTyxFQUFFLEVBQUUsRUFBRSxvQkFBb0IsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO29CQUN4RSxhQUFhLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxzQkFBb0IsQ0FBQyxDQUFDO29CQUVsRCxJQUFNLE9BQU8sR0FBRyxJQUFJLE9BQU8sQ0FBQyw0QkFBNEIsQ0FBQzt3QkFDdkQsU0FBUyxFQUFFLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO3dCQUN4RCxXQUFXLEVBQUUsV0FBVztxQkFDekIsQ0FBQyxDQUFDO29CQUNILElBQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLE1BQU0sRUFBRSxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7b0JBQ3hGLE9BQU8sQ0FBQyxPQUFPLENBQUM7eUJBQ2IsSUFBSSxDQUFDLFVBQUMsTUFBVzt3QkFDaEIsYUFBYSxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQzt3QkFDckQsSUFBSSxZQUFZLENBQUMsUUFBUSxDQUFDLEVBQUU7NEJBQzFCLFlBQVksQ0FBQyxRQUFRLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBQyxFQUFXO29DQUFULE9BQU8sYUFBQTtnQ0FDdkMsT0FBTyxFQUFFLENBQUM7NEJBQ1osQ0FBQyxDQUFDLENBQUM7NEJBQ0gsT0FBTyxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUM7eUJBQy9CO3dCQUNELE9BQU8sRUFBRSxDQUFDO29CQUNaLENBQUMsQ0FBQzt5QkFDRCxLQUFLLENBQUMsVUFBQyxLQUFVOzt3QkFDaEIsSUFBSSxLQUFLLENBQUMsSUFBSSxLQUFLLDBCQUEwQixJQUFJLENBQUEsTUFBQSxLQUFLLENBQUMsU0FBUywwQ0FBRSxjQUFjLE1BQUssR0FBRyxFQUFFOzRCQUV4RixhQUFhLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO3lCQUNoQzt3QkFFRCxJQUFNLFlBQVksR0FBRyxNQUFNLENBQUMsTUFBTSxDQUNoQyxJQUFJLEtBQUssQ0FDUCw0Q0FBNEM7NEJBQzFDLHdGQUF3RixDQUMzRixFQUNELEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxDQUNsQixDQUFDO3dCQUdGLElBQUksWUFBWSxDQUFDLFFBQVEsQ0FBQyxFQUFFOzRCQUMxQixZQUFZLENBQUMsUUFBUSxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQUMsRUFBVTtvQ0FBUixNQUFNLFlBQUE7Z0NBQ3RDLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQzs0QkFDdkIsQ0FBQyxDQUFDLENBQUM7NEJBQ0gsT0FBTyxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUM7eUJBQy9CO3dCQUVELElBQUksT0FBTyxDQUFDLDRCQUE0QixFQUFFOzRCQUN4QyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUM7eUJBQ3RCOzZCQUFNOzRCQUdMLGFBQWEsQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLHNCQUFvQixDQUFDLENBQUM7NEJBQ2xELE9BQU8sRUFBRSxDQUFDO3lCQUNYO29CQUNILENBQUMsQ0FBQyxDQUFDO2lCQUNOO1lBQ0gsQ0FBQyxDQUFDLEVBQUE7O0tBQUEsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVuZHBvaW50RGlzY292ZXJ5TWlkZGxld2FyZUNvbmZpZyB9IGZyb20gXCIuL2dldEVuZHBvaW50RGlzY292ZXJ5UGx1Z2luXCI7XG5pbXBvcnQgeyBFbmRwb2ludERpc2NvdmVyeVJlc29sdmVkQ29uZmlnLCBQcmV2aW91c2x5UmVzb2x2ZWQgfSBmcm9tIFwiLi9yZXNvbHZlRW5kcG9pbnREaXNjb3ZlcnlDb25maWdcIjtcblxuZXhwb3J0IGludGVyZmFjZSBVcGRhdGVEaXNjb3ZlcmVkRW5kcG9pbnRJbkNhY2hlT3B0aW9ucyBleHRlbmRzIEVuZHBvaW50RGlzY292ZXJ5TWlkZGxld2FyZUNvbmZpZyB7XG4gIGNhY2hlS2V5OiBzdHJpbmc7XG4gIGNvbW1hbmROYW1lOiBzdHJpbmc7XG4gIGVuZHBvaW50RGlzY292ZXJ5Q29tbWFuZEN0b3I6IG5ldyAoY29tYW5kQ29uZmlnOiBhbnkpID0+IGFueTtcbn1cblxuY29uc3QgcmVxdWVzdFF1ZXVlOiB7IFtrZXk6IHN0cmluZ106IHsgcmVzb2x2ZTogRnVuY3Rpb247IHJlamVjdDogRnVuY3Rpb24gfVtdIH0gPSB7fTtcblxuZXhwb3J0IGNvbnN0IHVwZGF0ZURpc2NvdmVyZWRFbmRwb2ludEluQ2FjaGUgPSBhc3luYyAoXG4gIGNvbmZpZzogRW5kcG9pbnREaXNjb3ZlcnlSZXNvbHZlZENvbmZpZyAmIFByZXZpb3VzbHlSZXNvbHZlZCxcbiAgb3B0aW9uczogVXBkYXRlRGlzY292ZXJlZEVuZHBvaW50SW5DYWNoZU9wdGlvbnNcbikgPT5cbiAgbmV3IFByb21pc2U8dm9pZD4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGNvbnN0IHsgZW5kcG9pbnRDYWNoZSB9ID0gY29uZmlnO1xuICAgIGNvbnN0IHsgY2FjaGVLZXksIGNvbW1hbmROYW1lLCBpZGVudGlmaWVycyB9ID0gb3B0aW9ucztcblxuICAgIGNvbnN0IGVuZHBvaW50cyA9IGVuZHBvaW50Q2FjaGUuZ2V0KGNhY2hlS2V5KTtcblxuICAgIGlmIChlbmRwb2ludHMgJiYgZW5kcG9pbnRzLmxlbmd0aCA9PT0gMSAmJiBlbmRwb2ludHNbMF0uQWRkcmVzcyA9PT0gXCJcIikge1xuICAgICAgLy8gRW5kcG9pbnQgb3BlcmF0aW9uIGFscmVhZHkgaW4tZmxpZ2h0LlxuICAgICAgLy8gQWRkIHJlcXVlc3QgdG8gcmVxdWVzdCBxdWV1ZSBvbmx5IGlmIGRpc2NvdmVyZWQgZW5kcG9pbnQgaXMgcmVxdWlyZWQuXG4gICAgICBpZiAob3B0aW9ucy5pc0Rpc2NvdmVyZWRFbmRwb2ludFJlcXVpcmVkKSB7XG4gICAgICAgIGlmICghcmVxdWVzdFF1ZXVlW2NhY2hlS2V5XSkgcmVxdWVzdFF1ZXVlW2NhY2hlS2V5XSA9IFtdO1xuICAgICAgICByZXF1ZXN0UXVldWVbY2FjaGVLZXldLnB1c2goeyByZXNvbHZlLCByZWplY3QgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXNvbHZlKCk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChlbmRwb2ludHMgJiYgZW5kcG9pbnRzLmxlbmd0aCA+IDApIHtcbiAgICAgIC8vIEVuZHBvaW50IHJlY29yZCBpcyBwcmVzZW50IGluIGNhY2hlLlxuICAgICAgcmVzb2x2ZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBwdXQgaW4gYSBwbGFjZWhvbGRlciBmb3IgZW5kcG9pbnRzIGFscmVhZHkgcmVxdWVzdGVkLCBwcmV2ZW50XG4gICAgICAvLyB0b28gbXVjaCBpbi1mbGlnaHQgY2FsbHMuXG4gICAgICBjb25zdCBwbGFjZWhvbGRlckVuZHBvaW50cyA9IFt7IEFkZHJlc3M6IFwiXCIsIENhY2hlUGVyaW9kSW5NaW51dGVzOiAxIH1dO1xuICAgICAgZW5kcG9pbnRDYWNoZS5zZXQoY2FjaGVLZXksIHBsYWNlaG9sZGVyRW5kcG9pbnRzKTtcblxuICAgICAgY29uc3QgY29tbWFuZCA9IG5ldyBvcHRpb25zLmVuZHBvaW50RGlzY292ZXJ5Q29tbWFuZEN0b3Ioe1xuICAgICAgICBPcGVyYXRpb246IGNvbW1hbmROYW1lLnN1YnN0cigwLCBjb21tYW5kTmFtZS5sZW5ndGggLSA3KSwgLy8gc3RyaXAgXCJDb21tYW5kXCJcbiAgICAgICAgSWRlbnRpZmllcnM6IGlkZW50aWZpZXJzLFxuICAgICAgfSk7XG4gICAgICBjb25zdCBoYW5kbGVyID0gY29tbWFuZC5yZXNvbHZlTWlkZGxld2FyZShvcHRpb25zLmNsaWVudFN0YWNrLCBjb25maWcsIG9wdGlvbnMub3B0aW9ucyk7XG4gICAgICBoYW5kbGVyKGNvbW1hbmQpXG4gICAgICAgIC50aGVuKChyZXN1bHQ6IGFueSkgPT4ge1xuICAgICAgICAgIGVuZHBvaW50Q2FjaGUuc2V0KGNhY2hlS2V5LCByZXN1bHQub3V0cHV0LkVuZHBvaW50cyk7XG4gICAgICAgICAgaWYgKHJlcXVlc3RRdWV1ZVtjYWNoZUtleV0pIHtcbiAgICAgICAgICAgIHJlcXVlc3RRdWV1ZVtjYWNoZUtleV0uZm9yRWFjaCgoeyByZXNvbHZlIH0pID0+IHtcbiAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBkZWxldGUgcmVxdWVzdFF1ZXVlW2NhY2hlS2V5XTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goKGVycm9yOiBhbnkpID0+IHtcbiAgICAgICAgICBpZiAoZXJyb3IubmFtZSA9PT0gXCJJbnZhbGlkRW5kcG9pbnRFeGNlcHRpb25cIiB8fCBlcnJvci4kbWV0YWRhdGE/Lmh0dHBTdGF0dXNDb2RlID09PSA0MjEpIHtcbiAgICAgICAgICAgIC8vIEVuZHBvaW50IGlzIGludmFsaWQsIGRlbGV0ZSB0aGUgY2FjaGUgZW50cnkuXG4gICAgICAgICAgICBlbmRwb2ludENhY2hlLmRlbGV0ZShjYWNoZUtleSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29uc3QgZXJyb3JUb1Rocm93ID0gT2JqZWN0LmFzc2lnbihcbiAgICAgICAgICAgIG5ldyBFcnJvcihcbiAgICAgICAgICAgICAgYFRoZSBvcGVyYXRpb24gdG8gZGlzY292ZXIgZW5kcG9pbnQgZmFpbGVkLmAgK1xuICAgICAgICAgICAgICAgIGAgUGxlYXNlIHJldHJ5LCBvciBwcm92aWRlIGEgY3VzdG9tIGVuZHBvaW50IGFuZCBkaXNhYmxlIGVuZHBvaW50IGRpc2NvdmVyeSB0byBwcm9jZWVkLmBcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICB7IHJlYXNvbjogZXJyb3IgfVxuICAgICAgICAgICk7XG5cbiAgICAgICAgICAvL2ZhaWwgYWxsIHRoZSBwZW5kaW5nIHJlcXVlc3RzIGluIGJhdGNoXG4gICAgICAgICAgaWYgKHJlcXVlc3RRdWV1ZVtjYWNoZUtleV0pIHtcbiAgICAgICAgICAgIHJlcXVlc3RRdWV1ZVtjYWNoZUtleV0uZm9yRWFjaCgoeyByZWplY3QgfSkgPT4ge1xuICAgICAgICAgICAgICByZWplY3QoZXJyb3JUb1Rocm93KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZGVsZXRlIHJlcXVlc3RRdWV1ZVtjYWNoZUtleV07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKG9wdGlvbnMuaXNEaXNjb3ZlcmVkRW5kcG9pbnRSZXF1aXJlZCkge1xuICAgICAgICAgICAgcmVqZWN0KGVycm9yVG9UaHJvdyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIEVuZHBvaW50IERpc2NvdmVyeSBpcyBvcHRpb25hbC4gTm8gZXJyb3IgbmVlZHMgdG8gYmUgdGhyb3duLlxuICAgICAgICAgICAgLy8gU2V0IHBsYWNlSG9sZGVyIGVuZHBvaW50IHRvIGRpc2FibGUgcmVmcmVzaCBmb3Igb25lIG1pbnV0ZS5cbiAgICAgICAgICAgIGVuZHBvaW50Q2FjaGUuc2V0KGNhY2hlS2V5LCBwbGFjZWhvbGRlckVuZHBvaW50cyk7XG4gICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gIH0pO1xuIl19